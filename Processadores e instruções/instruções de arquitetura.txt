instruções de arquitetura
0 = soma // marcador_destino marcador_1 marcador_2 // marcador_1 + marcador_2.
1 = diminuição // marcador_destino marcador_1 marcador_2 // marcador_1 - marcador_2.
2 = pegar valor instantaneamente // marcador_destino número.
3 = jump // valor do pulo.
4 = multiplica // marcador_destino marcador_1 marcador_2 // marcador_1 * marcador_2.
5 = se for maior pula // null marcador_1 marcador_2.
6 = se for igual pula // null marcador_1 marcador_2.
7 = se for menor pula // null marcador_1 marcador_2.
8 = ler da memoria null valor posição // marcador_destino marcador_valor marcador_posição.
9 = escrever li escrita posição // null marcador_valor marcador_posição.
a = numero aleatorio // marcador_destino //gera um numero aleatorio entre 0 e 124
b = bolha // não faz nada.
c = soma com data_razard // marcador_destino null marcador_2 // soma com o resultado do comando anterior.
d = multiplicação com data_razaed // marcador_destino null marcador_2 // multiplica com o resultado do comando anterior.
e = MemRead data_razard // marcador_destino marcador_valor // pega o valor da ultima operação e coloca no marcador_posição.
f = MemWrite data_razard guardar posição // null marcador_valor // pega o valor da ultima operação e coloca no marcador_posição.

considerações:
Instruções de salto: Para a efetuação de um salto em qualquer instrução use 3 bolhas.
As instruções 5, 6 e 7: Essas inscrições so pulam para frente usando em consideração a posição que elas foram chamadas.
Se nesesario usar um marcador rápido: Se e necessário usar um marcador rapidamente use as instruções data_razaed caso contrário bolhas serão necessárias.
Organização do codigo: Pense bem na ordem que as instruções são chamadas isso pode reduzir as bolhas.
